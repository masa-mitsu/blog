<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mitsuo Blog</title>
    <link>https://masa-mitsu.github.io/blog/</link>
    <description>Recent content on Mitsuo Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 21 Jul 2022 21:45:00 +0900</lastBuildDate><atom:link href="https://masa-mitsu.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>argparse の挙動メモ</title>
      <link>https://masa-mitsu.github.io/blog/posts/20220721_01/</link>
      <pubDate>Thu, 21 Jul 2022 21:45:00 +0900</pubDate>
      
      <guid>https://masa-mitsu.github.io/blog/posts/20220721_01/</guid>
      <description>Python の argparse について、引数名が予約語と重なってしまった場合の挙動や、別名の指定方法について調べました。
状況 Python スクリプトを、以下のようなコマンドライン引数とともに走らせる状況を考えます。
python some_script.py --some-opt SOME_OPT --from FROM 通常であれば、以下のようなコードを書くことで、Python プログラム内でコマンドライン引数を読み出すことができます。
# some_script.py from argparse import ArgumentParser  parser = ArgumentParser() parser.add_argument(&amp;#34;--some-opt&amp;#34;) parser.add_argument(&amp;#34;--from&amp;#34;) args = parser.parse_args()  # args.some_opt と指定すると、コマンドライン引数 --some-opt の # 指定値を読み取ることができる しかし、from は Python の予約語です。 したがって、args.from では --from で指定した値を読み出せず、エラーとなります。
# some_script.py (続き)  # 通常であれば、以下のように --some-opt で指定した値を読み出せる。 print(args.some_opt) # -&amp;gt; SOME_OPT と出力される  # しかし、引数名が予約語と重複した場合には、値を読み出せない。 print(args.from) # -&amp;gt; SyntaxError: invalid syntax 解決方針 次の方針で、この問題を解決したいです。</description>
    </item>
    
    <item>
      <title>Windowsでnginx-rtmp-moduleをビルドする (MinGW版)</title>
      <link>https://masa-mitsu.github.io/blog/posts/20220516_01/</link>
      <pubDate>Mon, 16 May 2022 21:53:00 +0900</pubDate>
      
      <guid>https://masa-mitsu.github.io/blog/posts/20220516_01/</guid>
      <description>最近、友人に勧められて始めた Splatoon 2 というゲームにハマっています。 私はゲーム部屋にこもってゲームをすることが多いのですが、宅内の他の部屋にゲームのプレイ画面を転送し表示できたら面白いなと思っていました。
調査したところ、nginxをnginx-rtmp-moduleモジュール付きでビルドし、映像配信サーバーを立てることで、LAN内の他マシンと画面を共有できることが分かりました。 しかし、他記事等に掲載されているビルド手順がLinuxベースだったり、情報が古かったりしたため、最新のトライ記録をまとめておきたく、本記事を執筆しました。
nginx-rtmp-module
環境  Windows 10 コンパイル環境として MSYS2 + MinGW を使用  手順1. MSYS環境のセットアップ MSYS公式サイトから、最新のインストーラーを入手し、インストールします。
インストールが完了したら、pacman パッケージマネージャを利用し、以下ツール群をインストールします。
pacman -S base-devel pacman -S mingw-w64-x86_64-toolchain pacman -S git pacman -S make pacman -S autoconf pacman -S automake 手順2. 必要なソースコード群の入手 以下のソースコード群を入手します。
 nginx (最新) zlib (最新) OpenSSL (v1.1.1o) PCRE (v8.5)  PCRE2ではコンパイルが通らなかった。 PCREはGitHubにソースがなく、SourceForgeでのみ入手可能である。 入手先: https://sourceforge.net/projects/pcre/   nginx-rtmp-module (最新)  # nginx git clone https://github.com/nginx/nginx.git --depth 1 -b release-1.</description>
    </item>
    
    <item>
      <title>初投稿</title>
      <link>https://masa-mitsu.github.io/blog/posts/20220510_01/</link>
      <pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://masa-mitsu.github.io/blog/posts/20220510_01/</guid>
      <description>初めまして。満尾 真章 (みつお まさあき) です。
自分の好きな技術について記事を書くため、こちらのブログをセットアップしました。 頻度は少ないかもしれませんが、少しずつ記事を投稿しようと考えています。
これから、よろしくお願いいたします。</description>
    </item>
    
  </channel>
</rss>
