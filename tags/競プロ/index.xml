<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>競プロ on Mitsuo Blog</title>
    <link>https://masa-mitsu.github.io/blog/tags/%E7%AB%B6%E3%83%97%E3%83%AD/</link>
    <description>Recent content in 競プロ on Mitsuo Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 25 Apr 2023 00:58:00 +0900</lastBuildDate><atom:link href="https://masa-mitsu.github.io/blog/tags/%E7%AB%B6%E3%83%97%E3%83%AD/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[競プロ] ARC143-B (Counting Grids) の解説を理解するためのメモ</title>
      <link>https://masa-mitsu.github.io/blog/posts/20230425_01/</link>
      <pubDate>Tue, 25 Apr 2023 00:58:00 +0900</pubDate>
      
      <guid>https://masa-mitsu.github.io/blog/posts/20230425_01/</guid>
      <description>本記事の目的 AtCoder ARC143-B (Counting Grids) の解説を、ぱっと見では理解できなかった。 具体的に状況を図示することで、なんとか理解できた。 理解のために踏んだプロセスについて、ここに記録を残し共有する。 すぐに理解できなかった解説の記載 この問題を自力で解こうと考えを巡らせましたが、残念ながら解けませんでした。解説を見たところ、冒頭に次のような記載がありました (太字は筆者註)。
どんな書き込み方についても，2 つの条件をともに満たさないようなマスは高々 1 つしか存在しません．というのも，そのようなマスは次の条件を満たすからです．
同じ列に書かれている数は，そのマスに書かれている数より小さい． 同じ行に書かれている数は，そのマスに書かれている数より大きい． https://atcoder.jp/contests/arc143/editorial/4193
この文章をさらっと読んだだけでは、具体的な例が書かれていなかったために、太字部分を理解できませんでした。そこで、この部分が何を言わんとしているのか、具体的に状況を図示しつつ、理解を試みました。
理解のための具体例 $N \times N$ グリッドの左上にあるマス $a_{1,1}$ が、2つの条件をともに満たさないマスであると仮定します。なお、ある書き込み方に対し、任意の2行や2列を入れ替えても、条件の成立/不成立は変わらないため、$a_{1,1}$ 以外が対象のマスであった場合には、そのマスが $a_{1,1}$ の位置に来るよう、自身の列と左端の列とを、自身の行と上端の行とを、それぞれ入れ替えれば良いです。
このとき、$a_{1,1}$ は与えられた2条件をともに満たさないマスであるから、次の(E1)(E2)がともに成り立ちます。
(E1) 任意の $p \neq 1$ に対し、$a_{1,1} &amp;gt; a_{p,1}$ (E2) 任意の $q \neq 1$ に対し、$a_{1,1} &amp;lt; a_{1,q}$ ここで、$a_{p,1}$ と同じ列には、自身よりも大きな値を持つ $a_{1,1}$ が書かれているため、$a_{p,1}$ は1番目の条件を必ず満たします。同じように、$a_{1,q}$ と同じ列には、自身よりも小さな値を持つ $a_{1,1}$ が書かれているため、$a_{1,q}$ は2番目の条件を必ず満たします。よって、1行目/1列目のマスは、$a_{1,1}$ を除き「2つの条件のうち、少なくとも一方を満たす」ことが分かります。
ここまではすぐに理解できたのですが、「$a_{p,q}$ ($p \neq 1$ かつ $q \neq 1$) は、2 つの条件のうち少なくとも一方を満たす」ことは、私にとって自明ではありませんでした。 背理法を用いてこれを証明します。すなわち、「$a_{p,q}$ は、2 つの条件をともに満たさない」と仮定し、矛盾を導きます。</description>
    </item>
    
    <item>
      <title>[競プロ] 再帰の実装をミスった記録</title>
      <link>https://masa-mitsu.github.io/blog/posts/20230206_01/</link>
      <pubDate>Mon, 06 Feb 2023 23:18:00 +0900</pubDate>
      
      <guid>https://masa-mitsu.github.io/blog/posts/20230206_01/</guid>
      <description>最近では、競技プログラミングに取り組んでいます。 昨年8月から継続的に AtCoder Beginner Contest に参加しており、レーティングは最高1263 (水色) です。 https://atcoder.jp/users/masa_mitsu
競技プログラミングに取り組む中で、様々な気づきがありました。 しょうもない内容ではありますが、（特に自身がやらかしたミスを中心に）少しずつ気づきを言語化し、本ページに蓄えていきたいと思います。
計算量 O(log N) にできたつもりが、実際は O(N) だった ARC151-B (A &amp;lt; AP) を解く中でやらかしたミスです。 https://atcoder.jp/contests/arc151/tasks/arc151_b
この問題では、高速に「ある整数 M の N 乗を、MOD (= 998244353) で割った余り」を求める必要がありました。 何も考えずに、次のように実装したところ、TLE が帰ってきました。
実装完了時点では、「Mpow() 関数を1回呼び出すたびに、npow が約半分になっているので、計算量は O(log N) になっているはず！」と思い込んでいました。
typedef long long int ll; const ll MOD = 998244353; ll Mpow(ll M, ll npow) { if (npow == 0) return 1; if (npow == 1) return M % MOD; return ((Mpow(M, npow/2) % MOD) * (Mpow(M, npow-npow/2) % MOD)) % MOD; } 残念ながら、この実装は計算量 O(N) になります。例えば npow = 100 のとき、Mpow() の総呼び出し回数は 199 です。npow = 200 にすると 399 回に増えます。 Mpow() を1回呼び出すと、n_pow はおよそ半分になるものの、その後 Mpow() 関数の呼び出しが2回生じるため、です。</description>
    </item>
    
  </channel>
</rss>
