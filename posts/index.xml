<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mitsuo Blog</title>
    <link>https://masa-mitsu.github.io/blog/posts/</link>
    <description>Recent content in Posts on Mitsuo Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 25 Apr 2023 00:58:00 +0900</lastBuildDate><atom:link href="https://masa-mitsu.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[競プロ] ARC143-B (Counting Grids) の解説を理解するためのメモ</title>
      <link>https://masa-mitsu.github.io/blog/posts/20230425_01/</link>
      <pubDate>Tue, 25 Apr 2023 00:58:00 +0900</pubDate>
      
      <guid>https://masa-mitsu.github.io/blog/posts/20230425_01/</guid>
      <description>本記事の目的 AtCoder ARC143-B (Counting Grids) の解説を、ぱっと見では理解できなかった。 具体的に状況を図示することで、なんとか理解できた。 理解のために踏んだプロセスについて、ここに記録を残し共有する。 すぐに理解できなかった解説の記載 この問題を自力で解こうと考えを巡らせましたが、残念ながら解けませんでした。解説を見たところ、冒頭に次のような記載がありました (太字は筆者註)。
どんな書き込み方についても，2 つの条件をともに満たさないようなマスは高々 1 つしか存在しません．というのも，そのようなマスは次の条件を満たすからです．
同じ列に書かれている数は，そのマスに書かれている数より小さい． 同じ行に書かれている数は，そのマスに書かれている数より大きい． https://atcoder.jp/contests/arc143/editorial/4193
この文章をさらっと読んだだけでは、具体的な例が書かれていなかったために、太字部分を理解できませんでした。そこで、この部分が何を言わんとしているのか、具体的に状況を図示しつつ、理解を試みました。
理解のための具体例 $N \times N$ グリッドの左上にあるマス $a_{1,1}$ が、2つの条件をともに満たさないマスであると仮定します。なお、ある書き込み方に対し、任意の2行や2列を入れ替えても、条件の成立/不成立は変わらないため、$a_{1,1}$ 以外が対象のマスであった場合には、そのマスが $a_{1,1}$ の位置に来るよう、自身の列と左端の列とを、自身の行と上端の行とを、それぞれ入れ替えれば良いです。
このとき、$a_{1,1}$ は与えられた2条件をともに満たさないマスであるから、次の(E1)(E2)がともに成り立ちます。
(E1) 任意の $p \neq 1$ に対し、$a_{1,1} &amp;gt; a_{p,1}$ (E2) 任意の $q \neq 1$ に対し、$a_{1,1} &amp;lt; a_{1,q}$ ここで、$a_{p,1}$ と同じ列には、自身よりも大きな値を持つ $a_{1,1}$ が書かれているため、$a_{p,1}$ は1番目の条件を必ず満たします。同じように、$a_{1,q}$ と同じ列には、自身よりも小さな値を持つ $a_{1,1}$ が書かれているため、$a_{1,q}$ は2番目の条件を必ず満たします。よって、1行目/1列目のマスは、$a_{1,1}$ を除き「2つの条件のうち、少なくとも一方を満たす」ことが分かります。
ここまではすぐに理解できたのですが、「$a_{p,q}$ ($p \neq 1$ かつ $q \neq 1$) は、2 つの条件のうち少なくとも一方を満たす」ことは、私にとって自明ではありませんでした。 背理法を用いてこれを証明します。すなわち、「$a_{p,q}$ は、2 つの条件をともに満たさない」と仮定し、矛盾を導きます。</description>
    </item>
    
    <item>
      <title>[競プロ] 再帰の実装をミスった記録</title>
      <link>https://masa-mitsu.github.io/blog/posts/20230206_01/</link>
      <pubDate>Mon, 06 Feb 2023 23:18:00 +0900</pubDate>
      
      <guid>https://masa-mitsu.github.io/blog/posts/20230206_01/</guid>
      <description>最近では、競技プログラミングに取り組んでいます。 昨年8月から継続的に AtCoder Beginner Contest に参加しており、レーティングは最高1263 (水色) です。 https://atcoder.jp/users/masa_mitsu
競技プログラミングに取り組む中で、様々な気づきがありました。 しょうもない内容ではありますが、（特に自身がやらかしたミスを中心に）少しずつ気づきを言語化し、本ページに蓄えていきたいと思います。
計算量 O(log N) にできたつもりが、実際は O(N) だった ARC151-B (A &amp;lt; AP) を解く中でやらかしたミスです。 https://atcoder.jp/contests/arc151/tasks/arc151_b
この問題では、高速に「ある整数 M の N 乗を、MOD (= 998244353) で割った余り」を求める必要がありました。 何も考えずに、次のように実装したところ、TLE が帰ってきました。
実装完了時点では、「Mpow() 関数を1回呼び出すたびに、npow が約半分になっているので、計算量は O(log N) になっているはず！」と思い込んでいました。
typedef long long int ll; const ll MOD = 998244353; ll Mpow(ll M, ll npow) { if (npow == 0) return 1; if (npow == 1) return M % MOD; return ((Mpow(M, npow/2) % MOD) * (Mpow(M, npow-npow/2) % MOD)) % MOD; } 残念ながら、この実装は計算量 O(N) になります。例えば npow = 100 のとき、Mpow() の総呼び出し回数は 199 です。npow = 200 にすると 399 回に増えます。 Mpow() を1回呼び出すと、n_pow はおよそ半分になるものの、その後 Mpow() 関数の呼び出しが2回生じるため、です。</description>
    </item>
    
    <item>
      <title>argparse の挙動メモ</title>
      <link>https://masa-mitsu.github.io/blog/posts/20220721_01/</link>
      <pubDate>Thu, 21 Jul 2022 21:45:00 +0900</pubDate>
      
      <guid>https://masa-mitsu.github.io/blog/posts/20220721_01/</guid>
      <description>Python の argparse について、引数名が予約語と重なってしまった場合の挙動や、別名の指定方法について調べました。
状況 Python スクリプトを、以下のようなコマンドライン引数とともに走らせる状況を考えます。
python some_script.py --some-opt SOME_OPT --from FROM 通常であれば、以下のようなコードを書くことで、Python プログラム内でコマンドライン引数を読み出すことができます。
# some_script.py from argparse import ArgumentParser parser = ArgumentParser() parser.add_argument(&amp;#34;--some-opt&amp;#34;) parser.add_argument(&amp;#34;--from&amp;#34;) args = parser.parse_args() # args.some_opt と指定すると、コマンドライン引数 --some-opt の # 指定値を読み取ることができる しかし、from は Python の予約語です。 したがって、args.from では --from で指定した値を読み出せず、エラーとなります。
# some_script.py (続き) # 通常であれば、以下のように --some-opt で指定した値を読み出せる。 print(args.some_opt) # -&amp;gt; SOME_OPT と出力される # しかし、引数名が予約語と重複した場合には、値を読み出せない。 print(args.from) # -&amp;gt; SyntaxError: invalid syntax 解決方針 次の方針で、この問題を解決したいです。
コマンドライン引数名である --from は変えない。 ソースコード側の呼び出し方は変えてもよい。 結論 結論から述べると、add_argument() 関数に dest オプションを付与し、 別名で読み出せるようにすれば OK です。</description>
    </item>
    
    <item>
      <title>Windowsでnginx-rtmp-moduleをビルドする (MinGW版)</title>
      <link>https://masa-mitsu.github.io/blog/posts/20220516_01/</link>
      <pubDate>Mon, 16 May 2022 21:53:00 +0900</pubDate>
      
      <guid>https://masa-mitsu.github.io/blog/posts/20220516_01/</guid>
      <description>最近、友人に勧められて始めた Splatoon 2 というゲームにハマっています。 私はゲーム部屋にこもってゲームをすることが多いのですが、宅内の他の部屋にゲームのプレイ画面を転送し表示できたら面白いなと思っていました。
調査したところ、nginxをnginx-rtmp-moduleモジュール付きでビルドし、映像配信サーバーを立てることで、LAN内の他マシンと画面を共有できることが分かりました。 しかし、他記事等に掲載されているビルド手順がLinuxベースだったり、情報が古かったりしたため、最新のトライ記録をまとめておきたく、本記事を執筆しました。
nginx-rtmp-module
環境 Windows 10 コンパイル環境として MSYS2 + MinGW を使用 手順1. MSYS環境のセットアップ MSYS公式サイトから、最新のインストーラーを入手し、インストールします。
インストールが完了したら、pacman パッケージマネージャを利用し、以下ツール群をインストールします。
pacman -S base-devel pacman -S mingw-w64-x86_64-toolchain pacman -S git pacman -S make pacman -S autoconf pacman -S automake 手順2. 必要なソースコード群の入手 以下のソースコード群を入手します。
nginx (最新) zlib (最新) OpenSSL (v1.1.1o) PCRE (v8.5) PCRE2ではコンパイルが通らなかった。 PCREはGitHubにソースがなく、SourceForgeでのみ入手可能である。 入手先: https://sourceforge.net/projects/pcre/ nginx-rtmp-module (最新) # nginx git clone https://github.com/nginx/nginx.git --depth 1 -b release-1.21.6 # zlib git clone https://github.com/madler/zlib.git --depth 1 -b v1.</description>
    </item>
    
    <item>
      <title>初投稿</title>
      <link>https://masa-mitsu.github.io/blog/posts/20220510_01/</link>
      <pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://masa-mitsu.github.io/blog/posts/20220510_01/</guid>
      <description>初めまして。満尾 真章 (みつお まさあき) です。
自分の好きな技術について記事を書くため、こちらのブログをセットアップしました。 頻度は少ないかもしれませんが、少しずつ記事を投稿しようと考えています。
これから、よろしくお願いいたします。</description>
    </item>
    
  </channel>
</rss>
